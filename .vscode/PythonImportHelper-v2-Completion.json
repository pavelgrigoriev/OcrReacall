[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "DbModel",
        "importPath": "models.db_model",
        "description": "models.db_model",
        "isExtraImport": true,
        "detail": "models.db_model",
        "documentation": {}
    },
    {
        "label": "MainView",
        "importPath": "views.main_view",
        "description": "views.main_view",
        "isExtraImport": true,
        "detail": "views.main_view",
        "documentation": {}
    },
    {
        "label": "DbController",
        "importPath": "controllers.db_controller",
        "description": "controllers.db_controller",
        "isExtraImport": true,
        "detail": "controllers.db_controller",
        "documentation": {}
    },
    {
        "label": "OcrController",
        "importPath": "controllers.ocr_controller",
        "description": "controllers.ocr_controller",
        "isExtraImport": true,
        "detail": "controllers.ocr_controller",
        "documentation": {}
    },
    {
        "label": "OcrModel",
        "importPath": "models.ocr_model",
        "description": "models.ocr_model",
        "isExtraImport": true,
        "detail": "models.ocr_model",
        "documentation": {}
    },
    {
        "label": "OcrWorker",
        "importPath": "workers.ocr_worker",
        "description": "workers.ocr_worker",
        "isExtraImport": true,
        "detail": "workers.ocr_worker",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pyscreenshot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyscreenshot",
        "description": "pyscreenshot",
        "detail": "pyscreenshot",
        "documentation": {}
    },
    {
        "label": "easyocr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "easyocr",
        "description": "easyocr",
        "detail": "easyocr",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "uic",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "set_start_method",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "MainController",
        "importPath": "controllers.main_controller",
        "description": "controllers.main_controller",
        "isExtraImport": true,
        "detail": "controllers.main_controller",
        "documentation": {}
    },
    {
        "label": "ConfigManager",
        "importPath": "config.config_manager",
        "description": "config.config_manager",
        "isExtraImport": true,
        "detail": "config.config_manager",
        "documentation": {}
    },
    {
        "label": "ConfigManager",
        "kind": 6,
        "importPath": "config.config_manager",
        "description": "config.config_manager",
        "peekOfCode": "class ConfigManager:\n    def __init__(self):\n        self.app_dir = os.path.expanduser('~/.OcrRecall')\n        self.config_path = os.path.join(self.app_dir, 'config.json')\n        self.ensure_app_directory()\n        self.config = self.load_config()\n    def ensure_app_directory(self):\n        os.makedirs(self.app_dir, exist_ok=True)\n    def load_config(self):\n        if os.path.exists(self.config_path):",
        "detail": "config.config_manager",
        "documentation": {}
    },
    {
        "label": "DbController",
        "kind": 6,
        "importPath": "controllers.db_controller",
        "description": "controllers.db_controller",
        "peekOfCode": "class DbController:\n    def __init__(self, settings_manager):\n        self.db_model = DbModel(settings_manager.get_app_dir())\n    def save_to_db(self, image_path, ocr_result):\n        self.db_model.save_to_db(image_path, ocr_result)\n    def search_exact_match(self, terms):\n        self.db_model.search_exact_match(terms)",
        "detail": "controllers.db_controller",
        "documentation": {}
    },
    {
        "label": "MainController",
        "kind": 6,
        "importPath": "controllers.main_controller",
        "description": "controllers.main_controller",
        "peekOfCode": "class MainController():\n    def __init__(self, config_manager):\n        self.db_controller = DbController(config_manager)\n        self.ocr_controller = OcrController(\n            config_manager, self.db_controller)\n        self.view = MainView()\n    def setup_connections(self):\n        self.view.pushButton.clicked.connect(self.search_ocr_results)\n    def search_ocr_results(self):\n        search_term = self.view.lineEdit.text()",
        "detail": "controllers.main_controller",
        "documentation": {}
    },
    {
        "label": "OcrController",
        "kind": 6,
        "importPath": "controllers.ocr_controller",
        "description": "controllers.ocr_controller",
        "peekOfCode": "class OcrController:\n    def __init__(self, settings_manager, db_controller):\n        self.ocr_model = OcrModel(settings_manager.get_app_dir())\n        self.db_controller = db_controller\n        self.ocr_worker = OcrWorker(self.ocr_model, self.db_controller)\n    def start_screenshot_loop(self):\n        self.ocr_worker.start()",
        "detail": "controllers.ocr_controller",
        "documentation": {}
    },
    {
        "label": "DbModel",
        "kind": 6,
        "importPath": "models.db_model",
        "description": "models.db_model",
        "peekOfCode": "class DbModel():\n    def __init__(self, db_path):\n        self.db_path = db_path + \"/ocr_results.db\"\n        self.init_db()\n    def init_db(self):\n        \"\"\"Создаем FTS5 таблицу для хранения результатов с полнотекстовым поиском.\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n            CREATE VIRTUAL TABLE IF NOT EXISTS ocr_results_fts",
        "detail": "models.db_model",
        "documentation": {}
    },
    {
        "label": "OcrModel",
        "kind": 6,
        "importPath": "models.ocr_model",
        "description": "models.ocr_model",
        "peekOfCode": "class OcrModel():\n    def __init__(self, image_folder):\n        self.image_folder = image_folder + \"/images\"\n        # Создаем папку для изображений, если она не существует\n        os.makedirs(self.image_folder, exist_ok=True)\n        # Инициализация модели OCR\n        self.reader = easyocr.Reader(['ru', 'en'], gpu=True)\n    def take_screenshot(self):\n        \"\"\"Захватываем полный экран.\"\"\"\n        return ImageGrab.grab()",
        "detail": "models.ocr_model",
        "documentation": {}
    },
    {
        "label": "MainView",
        "kind": 6,
        "importPath": "views.main_view",
        "description": "views.main_view",
        "peekOfCode": "class MainView(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(MainView, self).__init__()\n        uic.loadUi('views/ui/mainwindow.ui', self)",
        "detail": "views.main_view",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "views.settings_view",
        "description": "views.settings_view",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(400, 308)\n        self.buttonBox = QtWidgets.QDialogButtonBox(parent=Dialog)\n        self.buttonBox.setGeometry(QtCore.QRect(30, 240, 341, 32))\n        self.buttonBox.setOrientation(QtCore.Qt.Orientation.Horizontal)\n        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)\n        self.buttonBox.setObjectName(\"buttonBox\")\n        self.retranslateUi(Dialog)",
        "detail": "views.settings_view",
        "documentation": {}
    },
    {
        "label": "OcrWorker",
        "kind": 6,
        "importPath": "workers.ocr_worker",
        "description": "workers.ocr_worker",
        "peekOfCode": "class OcrWorker(QThread):\n    def __init__(self, ocr_model, db_controller):\n        super().__init__()\n        self.ocr_model = ocr_model\n        self.db_controller = db_controller\n        self.last_screenshot = None\n    def run(self):\n        self.last_screenshot = self.ocr_model.take_screenshot()\n        while True:\n            time.sleep(5)",
        "detail": "workers.ocr_worker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    config_manager = ConfigManager()\n    app = QtWidgets.QApplication(sys.argv)\n    controller = MainController(config_manager)\n    controller.run()\n    sys.exit(app.exec())\nif __name__ == \"__main__\":\n    main()",
        "detail": "main",
        "documentation": {}
    }
]